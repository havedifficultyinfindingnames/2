program = declaration_list;
declaration_list = declaration_list declaration | declaration;
declaration = var_declaration | func_declaration;
var_declaration = type_specifier l_ident ["[" integer "]"] ";";
type_specifier = "int" | "float" | "void";
func_declaration = type_specifier l_ident "(" [params] ")" [compound_stmt];
params = param_list | "void";
param_list = param_list "," param | param;
param = type_specifier l_ident ["[""]"];
compound_stmt = "{" [local_declarations] [stmt_list] "}";
local_declarations = local_declarations var_declaration;
stmt_list = stmt_list statement;
statement = expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt;
expression_stmt = [expression] ";";
selection_stmt = matched_stmt | unmatched_stmt;
matched_stmt = "if" "(" expression ")" matched_stmt "else" matched_stmt;
unmatched_stmt = "if" "(" expression ")" selection_stmt | "if" "(" expression ")" matched_stmt "else" unmatched_stmt;
iteration_stmt = "while" "(" expression ")" statement;
return_stmt = "return" [expression] ";";
expression = variable "=" expression | simple_expression;
variable = l_ident | l_ident "[" expression "]";
simple_expression = additive_expression relop additive_expression | additive_expression;
relop = "<=" | "<" | ">" | ">=" | "==" | "!=";
additive_expression = additive_expression addop term_expression | term_expression;
addop = "+" | "-";
term_expression = term_expression mulop factor_expression | factor_expression;
mulop = "*" | "/" | "%";
factor_expression = "(" expression ")" | var | call | number;
call = l_ident "(" [arg_list] ")";
arg_list = arg_list "," expression | expression;
number = integer | l_float_dec;
integer = l_int_char | l_int_oct | l_int_dec | l_int_hex;
